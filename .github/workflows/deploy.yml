name: Deploy Flask App to EKS

on:
  push:
    branches:
      - main

jobs:

    test:
      runs-on: ubuntu-latest
  
      steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.12'
    
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r flask-app/requirements.txt
  
      - name: Run tests
        run: |
          source venv/bin/activate
          pytest flask-app/tests

    build:
      runs-on: ubuntu-latest
      needs: test  

      steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

    # - name: DEBUG Print environment variables
    #   run: echo "env vars set in the container:"
    #   run: env
    # - name: DEBUG Print registry value
    #   run: echo "Registry value is ${{ steps.login-ecr.outputs.registry }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
  
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./flask-app
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/flask-app-repo:latest
    
    deploy:
      runs-on: ubuntu-latest
      needs: build

      steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Ensure Terraform binary is executable
        run: chmod +x $TERRAFORM_CLI_PATH/terraform

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name flask-app-cluster

      - name: Apply Kubernetes Deployment
        run: kubectl apply -f k8s/k8s-deployment.yml
